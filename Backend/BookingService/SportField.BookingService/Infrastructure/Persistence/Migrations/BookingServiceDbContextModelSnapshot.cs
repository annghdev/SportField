// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportField.BookingService.Infrastructure.Persistence;

#nullable disable

namespace SportField.BookingService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(BookingServiceDbContext))]
    partial class BookingServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportField.BookingService.Application.ReadModels.FieldProjection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FieldProjections_Read", (string)null);
                });

            modelBuilder.Entity("SportField.BookingService.Application.ReadModels.TimeSlotProjection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("TimeSlotProjections_Read", (string)null);
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("text");

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByAdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Origin")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.BookingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApprovalNotes")
                        .HasColumnType("text");

                    b.Property<string>("ApprovedByAdminId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GatewayResponse")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("GatewayTransactionId")
                        .HasColumnType("text");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProofImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProofUploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefundReason")
                        .HasColumnType("text");

                    b.Property<string>("RefundTransactionId")
                        .HasColumnType("text");

                    b.Property<decimal?>("RefundedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RefundedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("TimeoutDuration")
                        .HasColumnType("interval");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingPayments");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.BookingSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IndividualBookingDetailId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IndividualBookingDetailId");

                    b.ToTable("BookingSlot");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.BookingStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangeReason")
                        .HasColumnType("text");

                    b.Property<Guid?>("ChangedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromStatus")
                        .HasColumnType("integer");

                    b.Property<int>("ToStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingStatusHistory");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.CalendarSlotMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("text");

                    b.Property<string>("BlockReason")
                        .HasColumnType("text");

                    b.Property<string>("BookedByName")
                        .HasColumnType("text");

                    b.Property<string>("BookedByUserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<int?>("BookingStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("BookingType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlockedByAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("LockedBySessionId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("FacilityId", "FieldId", "TimeSlotId", "Date")
                        .IsUnique();

                    b.ToTable("CalendarSlotMatrix");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.GuestInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("GuestInfo");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.IndividualBookingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("IndividualBookingDetail");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("BookingPaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("text");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text");

                    b.Property<string>("GatewayReference")
                        .HasColumnType("text");

                    b.Property<string>("GatewayResponse")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsRetry")
                        .HasColumnType("boolean");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingPaymentId");

                    b.ToTable("PaymentTransaction");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.RecurringBookingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MonthlyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecurringStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResumedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SuspendedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuspensionReason")
                        .HasColumnType("text");

                    b.Property<string>("TimeSlotIds")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("RecurringBookingDetail");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.RecurringBookingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("GeneratedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MonthlyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("RecurringBookingDetailId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduleMonth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalSessions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecurringBookingDetailId");

                    b.ToTable("RecurringBookingSchedule");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.RecurringBookingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("text");

                    b.Property<bool>("IsMarkedByAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoShow")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("boolean");

                    b.Property<string>("MarkedByAdminId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("MarkedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecurringBookingDetailId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SessionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SkipReason")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecurringBookingDetailId");

                    b.ToTable("RecurringBookingSession");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.SlotLock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LockReason")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SlotLocks");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.BookingPayment", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.BookingSlot", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.IndividualBookingDetail", "IndividualBookingDetail")
                        .WithMany("BookingSlots")
                        .HasForeignKey("IndividualBookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndividualBookingDetail");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.BookingStatusHistory", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.Booking", "Booking")
                        .WithMany("StatusHistory")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.CalendarSlotMatrix", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.GuestInfo", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.Booking", "Booking")
                        .WithOne("GuestInfo")
                        .HasForeignKey("SportField.BookingService.Domain.Entities.GuestInfo", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.IndividualBookingDetail", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.Booking", "Booking")
                        .WithOne("IndividualDetail")
                        .HasForeignKey("SportField.BookingService.Domain.Entities.IndividualBookingDetail", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.PaymentTransaction", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.BookingPayment", "BookingPayment")
                        .WithMany("Transactions")
                        .HasForeignKey("BookingPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingPayment");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.RecurringBookingDetail", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.Booking", "Booking")
                        .WithOne("RecurringDetail")
                        .HasForeignKey("SportField.BookingService.Domain.Entities.RecurringBookingDetail", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.RecurringBookingSchedule", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.RecurringBookingDetail", "RecurringBookingDetail")
                        .WithMany("Schedules")
                        .HasForeignKey("RecurringBookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecurringBookingDetail");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.RecurringBookingSession", b =>
                {
                    b.HasOne("SportField.BookingService.Domain.Entities.RecurringBookingDetail", "RecurringBookingDetail")
                        .WithMany("Sessions")
                        .HasForeignKey("RecurringBookingDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecurringBookingDetail");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.Booking", b =>
                {
                    b.Navigation("GuestInfo");

                    b.Navigation("IndividualDetail");

                    b.Navigation("Payments");

                    b.Navigation("RecurringDetail");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.BookingPayment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.IndividualBookingDetail", b =>
                {
                    b.Navigation("BookingSlots");
                });

            modelBuilder.Entity("SportField.BookingService.Domain.Entities.RecurringBookingDetail", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
