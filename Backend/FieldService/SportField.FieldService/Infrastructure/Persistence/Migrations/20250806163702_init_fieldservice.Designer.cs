// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportField.FieldService.Infrastructure.Persistence;

#nullable disable

namespace SportField.FieldService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(FieldServiceDbContext))]
    [Migration("20250806163702_init_fieldservice")]
    partial class init_fieldservice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.FieldAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("FieldAvailabilities");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.FieldMaintenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("RecurrencePattern")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldMaintenances");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.FieldOperatingHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldOperatingHours");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.FieldPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("FieldPricings");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.Field", b =>
                {
                    b.HasOne("SportField.FieldService.Domain.Entities.Facility", "Facility")
                        .WithMany("Fields")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.FieldAvailability", b =>
                {
                    b.HasOne("SportField.FieldService.Domain.Entities.Field", "Field")
                        .WithMany("BlockedAvailabilities")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportField.FieldService.Domain.Entities.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.FieldMaintenance", b =>
                {
                    b.HasOne("SportField.FieldService.Domain.Entities.Field", "Field")
                        .WithMany("MaintenanceSchedules")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.FieldOperatingHours", b =>
                {
                    b.HasOne("SportField.FieldService.Domain.Entities.Field", "Field")
                        .WithMany("OperatingHours")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.FieldPricing", b =>
                {
                    b.HasOne("SportField.FieldService.Domain.Entities.Field", "Field")
                        .WithMany("FieldPricings")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportField.FieldService.Domain.Entities.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.TimeSlot", b =>
                {
                    b.HasOne("SportField.FieldService.Domain.Entities.Field", null)
                        .WithMany("TimeSlots")
                        .HasForeignKey("FieldId");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.Facility", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("SportField.FieldService.Domain.Entities.Field", b =>
                {
                    b.Navigation("BlockedAvailabilities");

                    b.Navigation("FieldPricings");

                    b.Navigation("MaintenanceSchedules");

                    b.Navigation("OperatingHours");

                    b.Navigation("TimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
